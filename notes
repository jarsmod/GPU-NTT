Mon Oct 16 10:40:00 AM +03 2023

git push -u origin testing

#= format source
$ astyle --style=google test/ntt_gpu_test.cu # format source
$ find src/ gtest/ test/ -type f -exec astyle --style=google {} \; # format all source

#= documentation
$ doxygen .doxycfg # generate docs
	- not of much use, actual source has no support for documentation generation.
	- todo for later

#- Testing
- MODULUS
    - MODULAR_REDUCTION_TYPE=0 -> Barrett Reduction(64 bit)
    - MODULAR_REDUCTION_TYPE=1 -> Goldilocks Reduction(64 bit)
    - MODULAR_REDUCTION_TYPE=2 -> Plantard Reduction(64 bit)
- DEFAULT_MODULUS

#= build from root dir
$ cmake . -D CMAKE_CUDA_ARCHITECTURES=86 -D MODULAR_REDUCTION_TYPE=1 -B./bbuild && ( cd bbuild && make; )

#= build for chosen modular reduction
$ mkdir -p bbuild/{0,1,2}                                                                                       
$ MTYP=0; cmake . -D CMAKE_CUDA_ARCHITECTURES=86 -D MODULAR_REDUCTION_TYPE=$MTYP -B./bbuild/$MTYP && ( cd bbuild/$MTYP && make; )

#= test for given ring size and other ring sizes
./test_ntt_cpu 12 1
for i in `seq 12 2 26`; do echo "i: $i"; ./bbuild/test_ntt_gpu $i 1 2>&1 | tee -a logs/test-ntt-gpu.log; done; # testing for different ring sizes

#=
(for i in `seq 12 2 26`; do for b in `seq 2 2 8`; do  echo -e "\nring: $i, batch: $b"; ./bbuild/test_ntt_gpu $i $b; done; done;) 2>&1 | tee -a logs/test-ntt-gpu-`date +"%Y-%-m-%d_%H-%M"`.log

#= build and execute for specified mod type and test over i rings, b batches
$ MTYP=1; cmake . -D CMAKE_CUDA_ARCHITECTURES=86 -D MODULAR_REDUCTION_TYPE=$MTYP -B./bbuild/$MTYP && ( cd bbuild/$MTYP && make; )
$ MTYP=1; (for i in `seq 12 2 26`; do for b in `seq 2 2 8`; do  echo -e "\nring: $i, batch: $b"; ./bbuild/$MTYP/test_ntt_gpu $i $b; done; done;) 2>&1 | tee -a logs/test-ntt-gpu-${MTYP}-`date +"%Y-%-m-%d_%H-%M"`.log #run expt for specf mod type
$ MTYP=2; (for i in `seq 12 2 26`; do for b in `seq 2 2 8`; do  echo -e "\nring: $i, batch: $b"; /bin/time -f "\n[time] %E real, %U user, %S sys" ./bbuild/$MTYP/test_ntt_gpu $i $b; done; done;) 2>&1 | tee -a logs/test-ntt-gpu-${MTYP}-`date +"%Y-%-m-%d_%H-%M"`.log # with time logging

#= misc.
$ pkg-config --modversion gtest || { echo -e "\nlib GoogleTest isnt installed, install by: $ sudo apt-get install libgtest-dev"; }

#=
g++ gtest/example.cpp -lgtest -o bin/gtest/example.out
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc src/common.cu -o tmp/common.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc src/nttparameters.cu -o tmp/nttparameters.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc src/ntt_cpu.cu -o tmp/ntt_cpu.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc src/ntt.cu -o tmp/ntt.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc test/ntt_cpu_test.cu -o tmp/ntt_cpu_test.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc test/ntt_gpu_test.cu -o tmp/ntt_gpu_test.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64   --generate-code=arch=compute_86,code=[compute_86,sm_86] -x cu -dc test/ntt_gpu_bench.cu -o tmp/ntt_gpu_bench.cu.o
nvcc -forward-unknown-to-host-compiler -DBARRETT_64  -arch=sm_89 test/ntt_gpu_test.cu src/*.cu -I./src -o bin/ntt_gpu_test
nvcc -forward-unknown-to-host-compiler -DBARRETT_64  -arch=sm_89 test/ntt_gpu_bench.cu src/*.cu -I./src -o bin/ntt_gpu_bench
nvcc -forward-unknown-to-host-compiler -DBARRETT_64  -arch=sm_89 test/ntt_cpu_test.cu src/*.cu -I./src -o bin/ntt_cpu_test
nvcc -forward-unknown-to-host-compiler -DBARRETT_64  -arch=sm_89 test/ntt_gpu_test.cu src/*.cu -I./src -o bin/test_ntt_gpu
nvcc -forward-unknown-to-host-compiler -DBARRETT_64  -arch=sm_89 gtest/test.cu src/*.cu -I./src -lgtest -o bin/test_ntt_gpu_gtest
./bin/build-and-test-mtyp.sh 0 # script to build and run

#= src/ structure
common.cu -- ignore
common.cuh -- ignore
modular_arith.cuh -- check it, mod operations
ntt_cpu.cu
ntt_cpu.cuh
ntt.cu
ntt.cuh
nttparameters.cu
nttparameters.cuh


#= code structure
class NTTParameters
    ReductionPolynomial poly_reduction;
    ModularReductionType modular_reduction;


NTTParameters parameters
    NTT_CPU generator(parameters);
    ntt_result[i] = generator.ntt(input1[i]);

    //GPU
    ntt_configuration cfg_ntt = {
        .n_power = LOGN,
        .ntt_type = FORWARD, // .ntt_type = INVERSE,
        .reduction_poly = ReductionPolynomial::X_N_minus,
        .zero_padding = false,
        .stream = 0};
    GPU_NTT(InOut_Datas, Forward_Omega_Table_Device, parameters.modulus, cfg_ntt, BATCH);    

cmake . -D CMAKE_CUDA_ARCHITECTURES=86 -D MODULAR_REDUCTION_TYPE=0 -B./bbuild && ( cd bbuild && make; ) && ./bbuild/testsuite
